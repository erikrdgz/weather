{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","console","log","setState","main","temp","sys","weather","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qRAUeA,EAPA,kBACX,6BACI,wBAAIC,UAAU,QAAd,kBACA,0ECaOC,EAhBF,SAAAC,GAAK,OACd,0BAAMF,UAAU,MAAMG,SAAUD,EAAME,YAClC,2BAAOJ,UAAU,aAAjB,OAEI,2BAAOA,UAAU,GAAGK,KAAK,OAAOC,KAAK,OAAOC,YAAY,gBAG5D,2BAAOP,UAAU,aAAjB,UAEI,2BAAOA,UAAU,GAAGK,KAAK,OAAOC,KAAK,UAAUC,YAAY,mBAE/D,4BAAQP,UAAU,sCAAlB,iBCUOQ,EAtBC,SAAAN,GAAK,OACjB,yBAAKF,UAAU,gBACVE,EAAMO,MAAQP,EAAMQ,SAAW,wCAClB,0BAAMV,UAAU,cAAcE,EAAMO,MADlB,MACiC,0BAAMT,UAAU,cAAcE,EAAMQ,UAGpGR,EAAMS,aAAe,2CACL,0BAAMX,UAAU,cAAcE,EAAMS,YAApC,UAGhBT,EAAMU,UAAY,wCACL,0BAAMZ,UAAU,cAAcE,EAAMU,WAGjDV,EAAMW,aAAe,2CACL,0BAAMb,UAAU,cAAcE,EAAMW,cAGpDX,EAAMY,OAAS,uBAAGd,UAAU,eAAeE,EAAMY,SCbpDC,EAAU,mCAkFDC,E,2MA/EbC,MAAQ,CACNN,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,WAAOI,G,EAGTd,W,uCAAa,WAAOe,GAAP,qBAAAC,EAAA,6DACXD,EAAEE,iBAEIZ,EAAOU,EAAEG,OAAOC,SAASd,KAAKe,MAC9Bd,EAAUS,EAAEG,OAAOC,SAASb,QAAQc,MAJ/B,SAMYC,MAAM,qDAAD,OAAsDhB,EAAtD,YAA8DC,EAA9D,kBAA+EK,EAA/E,oBANjB,cAMLW,EANK,gBAQQA,EAASC,OARjB,OAQLC,EARK,OAUXC,QAAQC,IAAIF,GACRnB,GAAQC,EACV,EAAKqB,SACH,CACEpB,YAAaiB,EAAKI,KAAKC,KACvBxB,KAAMmB,EAAKtB,KACXI,QAASkB,EAAKM,IAAIxB,QAClBE,SAAUgB,EAAKI,KAAKpB,SACpBC,YAAae,EAAKO,QAAQ,GAAGtB,YAC7BC,MAAO,KAIX,EAAKiB,SACH,CACEpB,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,MAAO,kCA9BF,4C,8HAsCX,OACE,yBAAKd,UAAU,4DACb,yBAAKA,UAAU,oEACb,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,6FACb,6BACA,kBAAC,EAAD,QAIF,yBAAKA,UAAU,kFACb,6BACA,kBAAC,EAAD,CAEIW,YAAayB,KAAKnB,MAAMN,YACxBF,KAAM2B,KAAKnB,MAAMR,KACjBC,QAAS0B,KAAKnB,MAAMP,QACpBE,SAAUwB,KAAKnB,MAAML,SACrBC,YAAauB,KAAKnB,MAAMJ,YACxBC,MAAOsB,KAAKnB,MAAMH,QAEpB,kBAAC,EAAD,CAAMV,WAAYgC,KAAKhC,sB,GArErBiC,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.29967a3f.chunk.js","sourcesContent":["import React from \"react\";\n\n\nconst Titles = () => (\n    <div>\n        <h1 className=\"mb-4\">Weather Finder</h1>\n        <p>Find out temperature, conditions and more</p>\n    </div>\n);\n\nexport default Titles;","import React from \"react\";\n\n\nconst Form = props => (\n    <form className=\"p-2\" onSubmit={props.getWeather}>\n        <label className=\"text-main\">\n            City\n            <input className=\"\" type=\"text\" name=\"city\" placeholder=\"Enter City\" />\n        </label>\n        \n        <label className=\"text-main\">\n            Country\n            <input className=\"\" type=\"text\" name=\"country\" placeholder=\"Enter Country\" />\n        </label>\n        <button className=\"btn btn-custom float-lg-right my-4\">Get Weather</button>\n    </form>\n\n);\n\nexport default Form;","import React from \"react\";\n\nconst Weather = props => (\n    <div className=\"weather-data\">\n        {props.city && props.country && <p>\n            Location: <span className=\"text-white\">{props.city}</span> , <span className=\"text-white\">{props.country}</span>\n        </p>}\n\n        {props.temperature && <p>\n            Temperature: <span className=\"text-white\">{props.temperature} &deg;</span> \n        </p>}\n\n        {props.humidity && <p>\n            Humidity: <span className=\"text-white\">{props.humidity}</span> \n        </p>}\n\n        {props.description && <p>\n            Conditions:  <span className=\"text-white\">{props.description}</span>\n        </p>}\n\n        {props.error && <p className=\"text-danger\">{props.error}</p>}\n    </div>\n);\n\nexport default Weather;","import React from 'react';\nimport './App.css';\n\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\nconst API_KEY = \"9e516561c5be2523b9ff275d6dcbf210\";\n\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined,\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}&units=imperial`);\n\n    const data = await api_call.json();\n\n    console.log(data);\n    if (city && country) {\n      this.setState(\n        {\n          temperature: data.main.temp,\n          city: data.name,\n          country: data.sys.country,\n          humidity: data.main.humidity,\n          description: data.weather[0].description,\n          error: \"\"\n        }\n      )\n    } else {\n      this.setState(\n        {\n          temperature: undefined,\n          city: undefined,\n          country: undefined,\n          humidity: undefined,\n          description: undefined,\n          error: \"Please enter a valid location\"\n        }\n      )\n    }\n\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper d-flex justify-content-center align-items-center\">\n        <div className=\"container d-flex justify-content-center align-items-center h-100\">\n          <div className=\"row app-card-container\">\n            <div className=\"col-md-5 h-100 bg-weather d-flex justify-content-center align-items-center p-3 text-white\">\n              <div>\n              <Titles/>\n              </div>\n             \n            </div>\n            <div className=\"col-md-7 weather-card d-flex justify-content-center align-items-center bg-dark\">\n              <div >\n              <Weather \n                  \n                  temperature={this.state.temperature}\n                  city={this.state.city}\n                  country={this.state.country}\n                  humidity={this.state.humidity}\n                  description={this.state.description}\n                  error={this.state.error}\n                />\n                <Form getWeather={this.getWeather} />\n              </div>\n\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}